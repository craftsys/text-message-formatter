---
layout: main
title: Format Your WhatsApp Messages
---

<div
  class="min-h-screen bg-whatsapp-chat-bg dark:bg-whatsapp-chat-bg-dark dark:text-white flex flex-col"
>
  <header class="text-center pt-8 mb-6 container px-4 mx-auto">
    <h1 class="text-2xl mb-4">Format your messages for WhatsApp</h1>
    <ul class="flex justify-center text-xs space-x-4 opacity-90">
      <li>*bold* &#8594; <b>bold</b></li>
      <li>_italic_ &#8594; <i>italic</i></li>
      <li>~strikethrough~ &#8594; <s>strikethrough</s></li>
      <li>```monospace``` &#8594; <code>monospace</code></li>
    </ul>
  </header>
  <div
    class="flex-1 flex mx-auto justify-center pb-8 container px-4 text-sm"
    style="min-height: 300px"
  >
    <div class="flex-1 flex" style="max-width: 26rem">
      <textarea
        id="raw_text"
        aria-label="Type your WhatsApp message here"
        class="p-4 border-none outline-none rounded-lg w-full flex-1 block min-h-full bg-white dark:bg-whatsapp-input-bg-dark"
        placeholder="Type your WhatsApp message here..."
      ></textarea>
    </div>
    <div class="px-4 relative">
      <div class="sticky top-0 space-y-8 pt-4 z-10">
        <div>
          <button
            class="opacity-30 hover:opacity-90"
            title="Copy to Clipboard"
            id="copyToClipboard"
          >
            <svg
              xmlns="http://www.w3.org/2000/svg"
              viewBox="0 0 20 20"
              fill="currentColor"
              class="w-6 h-6"
            >
              <path d="M8 2a1 1 0 000 2h2a1 1 0 100-2H8z" />
              <path
                d="M3 5a2 2 0 012-2 3 3 0 003 3h2a3 3 0 003-3 2 2 0 012 2v6h-4.586l1.293-1.293a1 1 0 00-1.414-1.414l-3 3a1 1 0 000 1.414l3 3a1 1 0 001.414-1.414L10.414 13H15v3a2 2 0 01-2 2H5a2 2 0 01-2-2V5zM15 11h2a1 1 0 110 2h-2v-2z"
              />
            </svg>
          </button>
        </div>
      </div>
      <div class="h-full flex items-center opacity-30 relative">
        <div>
          <svg
            xmlns="http://www.w3.org/2000/svg"
            viewBox="0 0 20 20"
            fill="currentColor"
            class="w-6 h-6"
          >
            <path
              d="M8 5a1 1 0 100 2h5.586l-1.293 1.293a1 1 0 001.414 1.414l3-3a1 1 0 000-1.414l-3-3a1 1 0 10-1.414 1.414L13.586 5H8zM12 15a1 1 0 100-2H6.414l1.293-1.293a1 1 0 10-1.414-1.414l-3 3a1 1 0 000 1.414l3 3a1 1 0 001.414-1.414L6.414 15H12z"
            />
          </svg>
        </div>
      </div>
    </div>
    <output
      for="raw_text"
      id="message_preview"
      name="message_preview"
      class="whitespace-pre-wrap block flex-1 bg-whatsapp-outgoing-chat-bg dark:bg-whatsapp-outgoing-chat-bg-dark dark:text-white p-4 rounded-lg"
      style="
        box-shadow: rgba(0, 0, 0, 0.13) 0px 1px 0.5px 0px;
        max-width: 24rem;
      "
    ></output>
  </div>
  <div class="container text-center mx-auto pb-8">
    <div>
      <div class="uppercase text-xs mb-1 inline-block mr-4 opacity-70">
        Sponsored by
      </div>
      <a href="https://sembark.com" class="font-medium"
        ><img
          src="https://assets.sembark.com/favicons/favicon.svg"
          class="inline-block w-6 h-6 bg-white rounded-full p-px"
          alt="Sembark Logo"
        />
        Sembark: The Travel Software</a
      >
      <p class="text-xs mt-2 tracking-wide">
        Automatically creates beautiful WhatsApp messages for all your travel
        operations.
      </p>
    </div>
  </div>
</div>
<div class="bg-gray-900 text-white">
  <div class="container mx-auto py-12 px-4">
    <h2 class="text-center text-2xl mb-4">Common Formatting Issues</h2>
    <ol class="list-decimal pl-4 text-sm space-y-2">
      <li>
        There should not be any space between opening/closing characters (*,_,~)
        and the inner text. For example: <mark>* bold*</mark> will NOT work as
        there is space between * and the first character. You can provide spaces
        between the text as necessary but not surrounding. E.g. *this will work*
        but *this will not *
      </li>
      <li>
        Any other formatting inside monospace (```) text won't work. For
        example: <mark>```I am *bold* and monospace```</mark> will NOT make the
        text bold, instead it will print the * as it is like this:
        <code>I am *bold* and monospace</code>)
      </li>
      <li>
        When using ```, there should be a space after the closing tag. For
        example, <mark>```this is something```text</mark> will NOT work because
        there should be a space after closing ``` (between ``` and text).
      </li>
    </ol>
  </div>
</div>
<script src="https://unpkg.com/hotkeys-js/dist/hotkeys.min.js"></script>
<script>
  const WHATSAPP_TAGS = [
    ["*", "b"],
    ["_", "i"],
    ["~", "del"],
    ["```", "code"],
  ]
  function whatsappPreview(text) {
    // sanitise text
    let html = text
      .replace(/>/g, "&gt;")
      .replace(/</g, "&lt;")
      .trim()
    WHATSAPP_TAGS.forEach(([tagSymbol, tagHtmlElm]) => {
      // replace all the tagSymbol with tagHtmlElm
      // e.g. *this* is *something* => <b>this</b> is <b>something</b>
      let start = html.indexOf(tagSymbol),
        end = html.indexOf(tagSymbol, start + tagSymbol.length)
      while (start > -1 && end > -1) {
        const innertPart = html.substring(start + tagSymbol.length, end)
        let canFormat = true
        if (["*", "_", "~"].indexOf(tagSymbol) !== -1) {
          if (innertPart.indexOf("\n") !== -1) {
            canFormat = false
          }
          // also, monospace pair dominates over *,_,~
          if (innertPart.indexOf("```") !== -1) {
            if (innertPart.indexOf("```", innertPart.indexOf("```") + 3) !== -1) {
              // move to next
              canFormat = false
            }
          }
          if (canFormat) {
            if (end === start + tagSymbol.length) {
              // nothing in-between
              // skip the closing
              end = html.indexOf(tagSymbol, end + tagSymbol.length)
              continue
            }
            // there can not be a surrounding space inside *,_,~
            if (
              // if these is a space after
              innertPart.charAt(0) === " " ||
              // or there is no space before
              (start !== 0 &&
                !new RegExp(/[\s\n]/).test(html.charAt(start - tagSymbol.length)))
            ) {
              // skip the start
              start = end
              end = html.indexOf(tagSymbol, start + tagSymbol.length)
              continue
            }
            if (
              // if these is a space before
              innertPart.charAt(innertPart.length - tagSymbol.length) === " " ||
              // if these is no space after
              (end !== html.length - tagSymbol.length &&
                !new RegExp(/[\s\n]/).test(html.charAt(end + tagSymbol.length)))
            ) {
              // skip the closing
              end = html.indexOf(tagSymbol, end + tagSymbol.length)
              continue
            }
          }
        } else {
          // ```
          if (end === start + tagSymbol.length) {
            // nothing in-between
            // skip the opening
            start = end
            end = html.indexOf(tagSymbol, start + tagSymbol.length)
            continue
          }
        }
        if (canFormat) {
          html =
            html.substring(0, start) +
            "<" +
            tagHtmlElm +
            ">" +
            innertPart +
            "</" +
            tagHtmlElm +
            ">" +
            html.substring(end + tagSymbol.length)
        }
        start = html.indexOf(tagSymbol, end + tagSymbol.length)
        end = html.indexOf(tagSymbol, start + tagSymbol.length)
      }
    })
    return html
    .replace(/\n/g, "<br />")
  }

  const STORAGE_KEY = "whatsapp_text";

  function saveTextToStorage(text) {
    window.sessionStorage.setItem(STORAGE_KEY, text);
  }

  function retrieveTextFromStorage() {
    return window.sessionStorage.getItem(STORAGE_KEY);
  }

  function updateOutput(text) {
    const html = whatsappPreview(text);
    const output = document.getElementById("message_preview");
    output.innerHTML = html;
    saveTextToStorage(text);
  }

  const input = document.getElementById("raw_text");
  input.addEventListener("input", function (e) {
    const value = e.currentTarget.value;
    updateOutput(value);
  });
  // init
  const initial_text = retrieveTextFromStorage();
  if (initial_text) {
    input.value = initial_text;
    updateOutput(initial_text);
  }
  // copy to clipboard
  const btn = document.getElementById("copyToClipboard");
  btn.addEventListener("click", function (e) {
    if (!navigator.clipboard) {
      alert("Copy to Clipboard not support by your browser.");
      return;
    }
    navigator.clipboard.writeText(input.value).then(
      function () {
        alert("Copied to clipboard.");
      },
      function (err) {
        alert("Copied to clipboard failed: " + String(err));
      }
    );
  });

  // enable hot keys for textarea
  hotkeys.filter = function (event) {
    var tagName = (event.target || event.srcElement).tagName;
    return tagName == "TEXTAREA";
  };

  hotkeys(
    "command+b,ctrl+b,command+i,ctrl+i,command+d,ctrl+d,command+m,ctrl+m",
    function (event, handler) {
      switch (handler.key) {
        case "command+b":
        case "ctrl+b":
          insertFormatTags(input, "*");
          break;
        case "command+i":
        case "ctrl+i":
          insertFormatTags(input, "_");
          break;
        default:
      }
    }
  );

  function insertFormatTags(inputField, tag) {
    const selection = getSelection(inputField);
    if (!selection) {
      inputField.value += wrapper * 2;
      return;
    }
    const startPos = selection.start;
    const endPos = selection.end;
    inputField.value =
      inputField.value.substring(0, startPos) +
      tag +
      inputField.value.substring(startPos, endPos) +
      tag +
      inputField.value.substring(endPos, inputField.value.length);
    setSelection(input, startPos + tag.length, endPos + tag.length);
  }

  function getSelection(elm) {
    if (elm.selectionStart || elm.selectionStart == "0") {
      return { start: elm.selectionStart, end: elm.selectionEnd };
    }
    return false;
  }
  function setSelection(elm, start, end) {
    elm.selectionStart = start;
    elm.selectionEnd = end;
  }
</script>
<footer class="py-12 bg-coolGray-800 text-white">
  <div class="container mx-auto">
    <div class="text-sm">
      <div class="uppercase mb-4">Disclaimer</div>
      <p class="opacity-70">
        WhatsApp is a property of Facebook and reserves all its rights. This
        tool is unaffiliated with Facebook and is mearly to provides a
        convenient way to format WhatsApp messages.
      </p>
    </div>
  </div>
</footer>
